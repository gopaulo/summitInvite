#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('🚀 Summit 25 Production Initialization Script');
console.log('===============================================\n');

// Check if config.json exists
const configPath = path.join(process.cwd(), 'config.json');
if (!fs.existsSync(configPath)) {
  console.error('❌ config.json not found!');
  console.log('📝 Please copy config.example.json to config.json and fill in your values:');
  console.log('   cp config.example.json config.json');
  console.log('   # Then edit config.json with your production settings');
  process.exit(1);
}

let config;
try {
  config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
  console.log('✅ Configuration loaded successfully');
} catch (error) {
  console.error('❌ Error reading config.json:', error.message);
  console.log('📝 Please ensure config.json contains valid JSON');
  process.exit(1);
}

// Validate required configuration
const requiredPaths = [
  'database.url',
  'security.sessionSecret',
  'security.recaptcha.siteKey',
  'security.recaptcha.secretKey',
  'email.brevoApiKey'
];

const missing = [];
for (const path of requiredPaths) {
  const keys = path.split('.');
  let current = config;
  for (const key of keys) {
    if (!current || !current[key]) {
      missing.push(path);
      break;
    }
    current = current[key];
  }
}

if (missing.length > 0) {
  console.error('❌ Missing required configuration:');
  missing.forEach(path => console.log(`   - ${path}`));
  console.log('\n📝 Please update your config.json file');
  process.exit(1);
}

// Generate .env file
console.log('\n📝 Generating .env file...');
const envContent = `# Generated by Summit 25 initialization script
# Database Configuration
DATABASE_URL=${config.database.url}

# Security
SESSION_SECRET=${config.security.sessionSecret}

# reCAPTCHA
RECAPTCHA_SECRET_KEY=${config.security.recaptcha.secretKey}
VITE_RECAPTCHA_SITE_KEY=${config.security.recaptcha.siteKey}

# Email Service
BREVO_API_KEY=${config.email.brevoApiKey}

# Admin Credentials
ADMIN_USERNAME=${config.admin?.username || 'admin'}
ADMIN_PASSWORD=${config.admin?.password || 'change-this-password'}

# Application Settings
NODE_ENV=${config.application?.nodeEnv || 'production'}
PORT=${config.application?.port || 5000}
`;

fs.writeFileSync('.env', envContent);
console.log('✅ .env file created successfully');

// Install dependencies
console.log('\n📦 Installing dependencies...');
try {
  execSync('npm install', { stdio: 'inherit' });
  console.log('✅ Dependencies installed successfully');
} catch (error) {
  console.error('❌ Failed to install dependencies:', error.message);
  console.log('💡 Attempting to fix common dependency issues...');
  
  // Try to fix dotenv version issue
  try {
    console.log('🔧 Fixing dotenv version...');
    execSync('npm install dotenv@^16.4.0', { stdio: 'inherit' });
    console.log('✅ Fixed dotenv version, retrying full install...');
    execSync('npm install', { stdio: 'inherit' });
    console.log('✅ Dependencies installed successfully after fixes');
  } catch (retryError) {
    console.error('❌ Still failed after attempting fixes:', retryError.message);
    console.log('💡 Please check your package.json and try manually:');
    console.log('   npm install dotenv@^16.4.0');
    console.log('   npm install');
    process.exit(1);
  }
}

// Setup database
console.log('\n🗄️  Setting up database...');
try {
  execSync('node scripts/setup-database.cjs', { stdio: 'inherit' });
  console.log('✅ Database setup completed successfully');
} catch (error) {
  console.error('❌ Database setup failed:', error.message);
  console.log('💡 Please check your database connection and try again');
  process.exit(1);
}

// Build the application
console.log('\n🔨 Building application...');
try {
  execSync('npm run build', { stdio: 'inherit' });
  console.log('✅ Application built successfully');
} catch (error) {
  console.error('❌ Build failed:', error.message);
  process.exit(1);
}

console.log('\n🎉 Summit 25 has been successfully initialized!');
console.log('===============================================');
console.log('🚀 To start your application:');
console.log('   npm start');
console.log('');
console.log('🔗 Your application will be available at:');
console.log(`   http://localhost:${config.application?.port || 5000}`);
console.log('');
console.log('🔑 Admin dashboard:');
console.log(`   http://localhost:${config.application?.port || 5000}/admin`);
console.log('   Admin credentials have been configured in your .env file');
console.log('');